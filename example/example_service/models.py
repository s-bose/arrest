# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2024-10-31T07:41:04+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, Field


class BodyPostCustomRequestWithQueryHeaderBodyCustomPost(BaseModel):
    foo: str = Field(..., title="Foo")
    bar: str = Field(..., title="Bar")


class Priority(Enum):
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"


class Task(BaseModel):
    id: UUID = Field(..., title="Id")
    user_id: UUID = Field(..., title="User Id")
    title: str = Field(..., title="Title")
    priority: Priority
    created_at: datetime = Field(..., title="Created At")


class TaskCreate(BaseModel):
    user_id: UUID = Field(..., title="User Id")
    title: str = Field(..., title="Title")
    priority: Priority


class TaskUpdate(BaseModel):
    user_id: UUID = Field(..., title="User Id")
    title: str = Field(..., title="Title")
    priority: Priority


class UserCreate(BaseModel):
    name: str = Field(..., title="Name")
    email: str = Field(..., title="Email")


class UserUpdate(BaseModel):
    name: str = Field(..., title="Name")
    email: str = Field(..., title="Email")


class Users(BaseModel):
    id: UUID = Field(..., title="Id")
    name: str = Field(..., title="Name")
    email: str = Field(..., title="Email")
    created_at: datetime = Field(..., title="Created At")


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title="Detail")
